- Test VTKEdge
- C-GET
- PET CLUT for CT in Ortho MPR PET-CT?

- Automatically adjust printing layout
- Better support for multi-frame CT/MR format (0x5200 group)
- Better performance for multi-frame files, up to 10 times faster for reading
- Multi-frame images are now available at the image level in the DB
- Multi-threaded loading function, ready for best performances on SSD drives
- Option to mark Secondary Capture images as Key Images
- Option to automatically send Secondary Capture images to a DICOM node
- Patient Level for DICOM Editor
- Scroll Through Series option - See 2D Viewer Preferences
- Full 32-bit pipeline (experimental) - See 2D Viewer Preferences
- Option to only allow a user to display images of the same patient
- Export Database Displayed List as a tab separated file
- Regenerate DICOM comments field (see Database Preferences)
- Scale level for parallel 3D projections
- Big-Endian Encoded DICOM files are now natively supported
- Option to lock / unlock ROIs
- Option to make ROIs selectable / unselectable
- Option to not delete studies if the comment field is filled (db auto-cleaning)
- Option to unify multiple patients/studies as the same patient
- SPECT-CT fusion support
- DICOM QuickLook version 1.1
- Better support for C-Move, C-Store and C-Find
- DICOM Validator tool, updated to latest version (Feb.2009)


- 4D Support for DICOM Export in 2D Viewer
- Spine plugin
- Graph 4D comme histo
- ROI Volume display options in 3D Rendering (power crust, disable texture, ...)
- Reslice oblique : 2D MPR, Points?
- Report modality - study description
- WADO Client/Server
- Hanging Protocol

- Password DB in keychain
- Preferences for Status menu in DB
- Merge Exports to Quicktime, Files, DICOM Files, DICOM Node
- Is it possible to place keyed images into a report automatically when generating a report?
- Batch export in 2D-MPR
- Perfusion
- ROI enhancement
- Worklist DICOM

HUG:

- Routage colloques
- Rapport images -> DPI

for i in `ls -a | grep plugin`; do tempfile="`basename "$i" .plugin`.osirixplugin"; mv $i $tempfile; done;

for i in `ls *.*`; do mv "$i" "$i"ppc; done

for i in `ls *.a`; do lipo -create "$i" "$i"ppc -output "$i"final; done


VTK MODIFICATIONS : 

Optimizations:

-march=nocona -ffast-math -funroll-loops -ftree-vectorize -fomit-frame-pointer

ITK: remove Wmo long double in CMakeLists.txt, after generating
__isnand dans vnl_math.cxx, remplacer avec __inline_isnand (voir math.h)

Done in VTKView.mm from OsiriX:
	- SetWindowName : 0L
	- Retain/Release system in VTKCocoaWindow

- TURN OFF FREETYPE CACHE SUPPORT in vtkFreeTypeUtilities.h (//# define VTK_FREETYPE_CACHING_SUPPORTED) __ppc64__
IT SEEMS TO WORK IF WE DONT CHANGE THE SIZE....
#if (__ppc64__) || (__ppc__)
//# define VTK_FREETYPE_CACHING_SUPPORTED
#else
# define VTK_FREETYPE_CACHING_SUPPORTED
#endif

- WARNING MEMORY LEAK IN SetCocoaManager (vtkCocoaRenderWindowInteractor and vtkCocoaRenderWindow) :

if (manager == NULL)
    {
    NSMutableDictionary* cocoaManager = 
      reinterpret_cast<NSMutableDictionary *>(this->CocoaManager);
    #ifdef __OBJC_GC__
      [[NSGarbageCollector defaultCollector]
        enableCollectorForPointer:cocoaManager];
    #else
      [cocoaManager release];
    #endif
    }

- Alpha rendering for freetype text : see below

- Switch default gcc compiler

cd /usr/bin
sudo rm gcc
sudo ln -s gcc-4.2 gcc
sudo rm c++
sudo ln -s c++-4.2 c++

Index: Rendering/vtkFreeTypeUtilities.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.cxx,v
retrieving revision 1.29
diff -r1.29 vtkFreeTypeUtilities.cxx
160c160
<   this->ImageCache   = NULL;
---
>   this->ImageCache   = NULL;cccc
1250c1250
< 
---
> 	  
1258c1258,1259
<           t_alpha = tprop_opacity * (*glyph_ptr / 255.0); 
---
>           t_alpha = tprop_opacity * (*glyph_ptr / 255.0);	// 
> 		  
1260c1261,1263
<           data_alpha = (data_ptr[3] - data_min) / data_range;
---
>           
> 		  data_alpha = (data_ptr[3] - data_min) / data_range;
> 		  
1262c1265,1266
<             data_min + data_range * tprop_r);
---
>             data_min + data_range * tprop_r*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1263a1268
> 		  
1265c1270,1271
<             data_min + data_range * tprop_g);
---
>             data_min + data_range * tprop_g*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1266a1273
> 		  
1268c1275,1276
<             data_min + data_range * tprop_b);
---
>             data_min + data_range * tprop_b*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1269a1278
> 		  
1271a1281
> 			
Index: Rendering/vtkFreeTypeUtilities.h
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.h,v
retrieving revision 1.11
diff -r1.11 vtkFreeTypeUtilities.h
42c42
< # define VTK_FREETYPE_CACHING_SUPPORTED
---
> //# define VTK_FREETYPE_CACHING_SUPPORTED
Index: Rendering/vtkOpenGLFreeTypeTextMapper.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkOpenGLFreeTypeTextMapper.cxx,v
retrieving revision 1.47
diff -r1.47 vtkOpenGLFreeTypeTextMapper.cxx
208a209,210
> 	return;
> 

