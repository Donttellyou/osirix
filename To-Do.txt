- Better support for multi-frame CT/MR format (0x5200 group)
- Better performance for multi-frame files, up to 10 times faster for reading
- Multi-frame images are now available at the image level in the DB
- Multi-threaded loading function, ready for best performances on SSD drive

- Sync : -> If blended -> propagate next (cerebrix) + Sync before?

- Display ONLY the SAME patient
- Autoselect format for printing
- Spine plugin
- Activate: scroll through series, patient level dcm editing, full 32-bit pipeline
- Secondary Capture as Key Images?
- ROI activate new features: unselectable, lock : ROI manager
- Add study level pour edit smart albums
- Add menu for export db list as file
- Add export to automatically export to export dicom 2DMPR, VR, ...
- Graph 4D comme histo

- ROI Volume display options in 3D Rendering (power crust, disable texture, ...)
- Reslice oblique : 2D MPR, Points?
- Report modality - study description
- WADO Client/Server
- Hanging Protocol

- Password DB in keychain
- Preferences for Status menu in DB
- Merge Exports to Quicktime, Files, DICOM Files, DICOM Node
- Is it possible to place keyed images into a report automatically when generating a report?
- Batch export in 2D-MPR
- New smart filter editor (10.5)
- NRRD: ITK IO
- NSOperation
- Perfusion
- ROI enhancement
- Worklist DICOM

HUG:

- Routage colloques
- Rapport images -> DPI

for i in `ls -a | grep plugin`; do tempfile="`basename "$i" .plugin`.osirixplugin"; mv $i $tempfile; done;

for i in `ls *.*`; do mv "$i" "$i"ppc; done

for i in `ls *.a`; do lipo -create "$i" "$i"ppc -output "$i"final; done


VTK MODIFICATIONS : 

Optimizations:

-march=nocona -ffast-math -funroll-loops -ftree-vectorize -fomit-frame-pointer

ITK: remove Wmo long double in CMakeLists.txt, after generating
__isnand dans vnl_math.cxx, remplacer avec __inline_isnand (voir math.h)

Done in VTKView.mm from OsiriX:
	- SetWindowName : 0L
	- Retain/Release system in VTKCocoaWindow

- TURN OFF FREETYPE CACHE SUPPORT in vtkFreeTypeUtilities.h (//# define VTK_FREETYPE_CACHING_SUPPORTED) __ppc64__
IT SEEMS TO WORK IF WE DONT CHANGE THE SIZE....
#if (__ppc64__) || (__ppc__)
//# define VTK_FREETYPE_CACHING_SUPPORTED
#else
# define VTK_FREETYPE_CACHING_SUPPORTED
#endif

- WARNING MEMORY LEAK IN SetCocoaManager (vtkCocoaRenderWindowInteractor and vtkCocoaRenderWindow) :

if (manager == NULL)
    {
    NSMutableDictionary* cocoaManager = 
      reinterpret_cast<NSMutableDictionary *>(this->CocoaManager);
    #ifdef __OBJC_GC__
      [[NSGarbageCollector defaultCollector]
        enableCollectorForPointer:cocoaManager];
    #else
      [cocoaManager release];
    #endif
    }

- Alpha rendering for freetype text : see below

- Switch default gcc compiler

cd /usr/bin
sudo rm gcc
sudo ln -s gcc-4.2 gcc
sudo rm c++
sudo ln -s c++-4.2 c++

Index: Rendering/vtkFreeTypeUtilities.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.cxx,v
retrieving revision 1.29
diff -r1.29 vtkFreeTypeUtilities.cxx
160c160
<   this->ImageCache   = NULL;
---
>   this->ImageCache   = NULL;cccc
1250c1250
< 
---
> 	  
1258c1258,1259
<           t_alpha = tprop_opacity * (*glyph_ptr / 255.0); 
---
>           t_alpha = tprop_opacity * (*glyph_ptr / 255.0);	// 
> 		  
1260c1261,1263
<           data_alpha = (data_ptr[3] - data_min) / data_range;
---
>           
> 		  data_alpha = (data_ptr[3] - data_min) / data_range;
> 		  
1262c1265,1266
<             data_min + data_range * tprop_r);
---
>             data_min + data_range * tprop_r*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1263a1268
> 		  
1265c1270,1271
<             data_min + data_range * tprop_g);
---
>             data_min + data_range * tprop_g*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1266a1273
> 		  
1268c1275,1276
<             data_min + data_range * tprop_b);
---
>             data_min + data_range * tprop_b*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1269a1278
> 		  
1271a1281
> 			
Index: Rendering/vtkFreeTypeUtilities.h
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.h,v
retrieving revision 1.11
diff -r1.11 vtkFreeTypeUtilities.h
42c42
< # define VTK_FREETYPE_CACHING_SUPPORTED
---
> //# define VTK_FREETYPE_CACHING_SUPPORTED
Index: Rendering/vtkOpenGLFreeTypeTextMapper.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkOpenGLFreeTypeTextMapper.cxx,v
retrieving revision 1.47
diff -r1.47 vtkOpenGLFreeTypeTextMapper.cxx
208a209,210
> 	return;
> 

----------------
x
Hardware: MacPro 8 cores 2.8 GHz - 6 GB of RAM
Dataset: Colonic CT - 1mm/1mm 965 images
Function: 3D Growing Region to segment the colonic lumen
32 bit: 22 secs
64 bit: 5 secs
----------------
x
Hardware: MacPro 8 cores 2.8 GHz - 6 GB of RAM
Dataset: CTA Lower Limbs - 1mm/1mm 1020 images
Function: Bone Removing Segmentation in 3D Volume Rendering
32 bit: 38 secs
64 bit: 9 secs
----------------
x
Hardware: iMac 2.8 GHz 2.8 GHz - 4 GB of RAM
Dataset: CTA Lower Limbs - 1mm/1mm 1020 images
Function: Bone Removing Segmentation in 3D Volume Rendering
32 bit: 128 secs
64 bit: 31 secs
----------------
x
Hardware: iMac 2.8 GHz - 4 GB of RAM
Dataset: Thoracic CT - 1mm/1mm 760 images
Function: 360 Rotation in 3D Volume Rendering
32 bit: 138 secs
64 bit: 85 secs
----------------
x
Hardware: iMac 2.8 GHz - 4 GB of RAM
Dataset: CTA - multiple series
Function: Loading a large series
32 bit: cannot load a series larger than 1'400 CT images
64 bit: can load without slowness a series of 3'200 CT images
----------------
x
Hardware: MacPro 8 cores 2.8 GHz - 8 GB of RAM
Dataset: CTA - multiple series
Function: Loading a large series
32 bit: cannot load a series larger than 1'400 CT images
64 bit: can load without slowness a series of 6'500 CT images
