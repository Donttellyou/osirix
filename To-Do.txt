- Certified for Snow Leopard compatibility (MacOS 10.6)
- New 'AutoCropping Algorithm' technology in 3D VR/MIP -> Between 20% to 100% faster rendering speed
- minIP for 3D MPR
- C-GET SCU/SCP (Dynamic IP address DICOM transfers)
- Settings for compression per modality
- JP2000 compression support, with quality level option
- Support for OpenJPEG JPEG2000 encoding
- OpenJPEG is 2.2x times faster : OpenJPEG is now faster than JasperLib
- Better compression/decompression performances when receiving DICOM images
- Soundex (search on pronunciation, instead of orthography) when searching for patient names
- Series comments/state displayed in Web Server
- Display Same Patient with gray color in Database window
- Better printing resolution for large images
- Default DB can receive images in background if another DB is selected
- Better DICOM CD/DVD reading
- Apply a route rule on db selection (contextual menu)
- Save and load DICOM printers list
- Multiple bugs corrections
- Much better support for DICOM Encapsulated PDF

* - Add JPEG 2000 plugin <- zip file and index file for web site
- Log Window 10.6

- Option to include 3D viewers in Tile Window
- DICOM TLS
- ROI Manager (series level)
- Hanging Protocols
- 4D Support for DICOM Export in 2D Viewer
- Display current image in 3D plane
- Registration see Volview - Plugin
- Sync Ortho-MPR
- OsiriX light

if you select to "Sync Zoom" in the 3D MPR viewer and "zoom around" in the windows, the zooming level info is not updated correctly in the 3 windows: remove zoom and rotation

1) In addition to the existing `key image' function, also add `key sesquence' function. There are so many sequence in a MRI scan nowadays and it would be good if the users can select which series within a study are more important and mark them as key sequences.

2) For the exisiting `find next key image' and `find previous key image' funection, the function is limited to a particular series and the search will stop at the first/last key image within a series. I would like to suggest the find option can proceed to the first key image of next series or the last key image of previous series towards the first and last key image of a particular series, probably witin the same study but may also extend to different studies of the same patient. 

When establishing a hanging protocol for MR and using two displays (8 column, 1 rows) and there is an odd number of series (say 7), OsiriX puts 6 series on the right display and 1 series on the left.  It does the same for 5 series (4 on right and 1 on left).  It doesn't seem to handle odd numbers of series well.


QA
- BugZilla (sourceforge?)
- EggPlant
- UnitTesting (assert functions) (http://developer.apple.com/tools/unittest.html - SenTestingKit.framewor, OCMock.framework)
- Regression tests
- ILCrashReporter
- Doxygen
- SVN - Version

----------------------------------------
Cleaning Notes
----------------------------------------
- ROI Manager
	renaming a ROI from the ROI Manager will rename all ROIs with the same name
		OK in general
		NOT OK if the ROI name is "Unnamed" (Default) because all other "Unnamed" ROIs will be renamed
- Mouse button function : ROIs
	What should we do of the "Axis" and "Dynamic Angle" ROIs ??
----------------------------------------

Cours
- Basics:
- dmg, export dicom cd, html export
- web server

- Report modality - study description
- WADO Client/Server
- Hanging Protocol

- Password DB in keychain
- Preferences for Status menu in DB
- Merge Exports to Quicktime, Files, DICOM Files, DICOM Node
- Is it possible to place keyed images into a report automatically when generating a report?
- Worklist DICOM

for i in `ls -a | grep plugin`; do tempfile="`basename "$i" .plugin`.osirixplugin"; mv $i $tempfile; done;

for i in `ls *.*`; do mv "$i" "$i"ppc; done

for i in `ls *.a`; do lipo -create "$i" "$i"ppc -output "$i"final; done

VTK MODIFICATIONS : 

Optimizations:

-march=nocona -ffast-math -funroll-loops -ftree-vectorize -fomit-frame-pointer

-mtune=nocona -mmmx -msse -msse2 -msse3 -mfpmath=sse

ITK: remove Wmo long double in CMakeLists.txt, after generating
__isnand dans vnl_math.cxx, remplacer avec __inline_isnand (voir math.h)

Done in VTKView.mm from OsiriX:
	- SetWindowName : 0L
	- Retain/Release system in VTKCocoaWindow

- TURN OFF FREETYPE CACHE SUPPORT in vtkFreeTypeUtilities.h (//# define VTK_FREETYPE_CACHING_SUPPORTED) __ppc64__
IT SEEMS TO WORK IF WE DONT CHANGE THE SIZE....
#if (__ppc64__) || (__ppc__)
//# define VTK_FREETYPE_CACHING_SUPPORTED
#else
# define VTK_FREETYPE_CACHING_SUPPORTED
#endif

for i in `ls *.dylib`; do install_name_tool -id @executable_path/../Frameworks/"$i" "$i"; done

- WARNING MEMORY LEAK IN SetCocoaManager (vtkCocoaRenderWindowInteractor and vtkCocoaRenderWindow) :

if (manager == NULL)
    {
    NSMutableDictionary* cocoaManager = 
      reinterpret_cast<NSMutableDictionary *>(this->CocoaManager);
    #ifdef __OBJC_GC__
      [[NSGarbageCollector defaultCollector]
        enableCollectorForPointer:cocoaManager];
    #else
      [cocoaManager release];
    #endif
    }

- Alpha rendering for freetype text : see below

- Switch default gcc compiler

cd /usr/bin
sudo rm gcc
sudo ln -s gcc-4.2 gcc
sudo rm c++
sudo ln -s c++-4.2 c++

Index: Rendering/vtkFreeTypeUtilities.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.cxx,v
retrieving revision 1.29
diff -r1.29 vtkFreeTypeUtilities.cxx
160c160
<   this->ImageCache   = NULL;
---
>   this->ImageCache   = NULL;cccc
1250c1250
< 
---
> 	  
1258c1258,1259
<           t_alpha = tprop_opacity * (*glyph_ptr / 255.0); 
---
>           t_alpha = tprop_opacity * (*glyph_ptr / 255.0);	// 
> 		  
1260c1261,1263
<           data_alpha = (data_ptr[3] - data_min) / data_range;
---
>           
> 		  data_alpha = (data_ptr[3] - data_min) / data_range;
> 		  
1262c1265,1266
<             data_min + data_range * tprop_r);
---
>             data_min + data_range * tprop_r*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1263a1268
> 		  
1265c1270,1271
<             data_min + data_range * tprop_g);
---
>             data_min + data_range * tprop_g*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1266a1273
> 		  
1268c1275,1276
<             data_min + data_range * tprop_b);
---
>             data_min + data_range * tprop_b*t_alpha + 
>                 (*data_ptr * data_alpha) * t_1_m_alpha);
1269a1278
> 		  
1271a1281
> 			
Index: Rendering/vtkFreeTypeUtilities.h
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkFreeTypeUtilities.h,v
retrieving revision 1.11
diff -r1.11 vtkFreeTypeUtilities.h
42c42
< # define VTK_FREETYPE_CACHING_SUPPORTED
---
> //# define VTK_FREETYPE_CACHING_SUPPORTED
Index: Rendering/vtkOpenGLFreeTypeTextMapper.cxx
===================================================================
RCS file: /cvsroot/VTK/VTK/Rendering/vtkOpenGLFreeTypeTextMapper.cxx,v
retrieving revision 1.47
diff -r1.47 vtkOpenGLFreeTypeTextMapper.cxx
208a209,210
> 	return;
> 

//make CFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch x86_64" LDFLAGS="-syslibroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch x86_64"

make CFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc64" LDFLAGS="-syslibroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc64"

// Not true anymore?
-- OpenJPEG 64bit support:
-- m = (int*)opj_malloc(sizeof(int) * (dwt_decode_max_resolution(tr, i)+5));
-- h.mem = v.mem = (int*)( (unsigned long)m + 16 - ( (unsigned long)m % 16 ) ) ;

OpenJPEG optimization:
make CFLAGS="-isysroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch x86_64 -O3 -fPIC -msse -msse2 -msse3 -ffast-math -funroll-loops -ftree-vectorize -fomit-frame-pointer" LDFLAGS="-syslibroot /Developer/SDKs/MacOSX10.5.sdk -arch ppc -arch i386 -arch x86_64" osx

care
core
med
lab
view
net
bio


voxray
ray
xray
omnirad
bitpix
voxpix
voxrad
spectral
volumic
gnu

pixceo

pixMeo
metaRad
diagImage
nsImage

imagemeta.com

imagirad.com

imagisity.com

imagions.com

generimage.com

diagimage.com

nsimage.com