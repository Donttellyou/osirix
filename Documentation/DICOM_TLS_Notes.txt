==========================================================================
DICOM TLS in OsiriX: How To Create a Certificate For Client Authentication
==========================================================================

Note: 	This document is under construction. It may contain mistakes.
	Do not rely on it yet.

--------------------------------------------------------------------------

A) in Keychain Access.app
- Open /Applications/Utilities/Keychain Access.app
- in the "Keychain Access" Menu, select "Certificate Assistant" > "Create a Certificate…"
- in "Certificate Assistant":
	1) "Create Your Certificate"
	 	- "Name" : chose the name of the certificate (can be anything)
		- "Identity Type" : "Self Signed Root" (not sure)
		- "Certificate Type" : "SSL Client"
		- turn on "Let me override defaults"
		- click "Continue"
		- click "Continue" in the warning
	2) "Certificate Information"
		- any values
		- click "Continue"
	3) "Certificate Information"
		- any values
		- click "Continue"
	4) "Key Pair Information"
		- any values
		- click "Continue"
	5) "Key Usage Extension"
		- check all (not sure)
		- click "Continue"
	6) "Extended Key Usage Extension"
		- check only "SSL Client Authentication" (not sure)
		- click "Continue"
	7) "Basic Constraints Extension"
		- don't check (not sure)
		- click "Continue"
	8) "Subject Alternate Name Extension"
		- don't check (not sure)
		- click "Continue"
	9) "Specify a Location For The Certificate"
		- choose "login" Keychain
		- click "Continue"
	10) "Conclusion"
		- click "Done"
- Locate your newly created certificate in your certificates, select it
- Choose "Export Items…" from the "File" Menu
- Choose the name (Certificate.p12) and location (certificates_dir), choose "Personal Information Exchange (.p12)" as "File Format"
- Choose a password (P1)

- Locate the key associated with the newly created certificate in your keys, select it
- Choose "Export Items…" from the "File" Menu
- Choose the name (Key.p12) and location (certificates_dir), choose "Personal Information Exchange (.p12)" as "File Format"
- Choose a password (P2)

B) in Terminal.app
- Open /Applications/Utilities/Terminal.app
- change to your certificates directory:
	$ cd certificates_dir

- convert the private key file from PKCS#12 format to PEM format:
	$ openssl pkcs12 -in Key.p12 -out Key.pem
- when prompt type the related password (P1):
	Enter Import Password:
	MAC verified OK
- choose a password for the new file (Key.pem)
	Enter PEM pass phrase:
	Verifying - Enter PEM pass phrase:

- convert the certificate file from PKCS#12 format to PEM format:
	$ openssl pkcs12 -in Certificate.p12 -out Certificate.pem
- when prompt type the related password (P2):
	Enter Import Password:
	MAC verified OK
- choose a password for the new file (Certificate.pem)
	Enter PEM pass phrase:
	Verifying - Enter PEM pass phrase:

C) In OsiriX
- use the files Key.pem and Certificate.pem with the related password in the TLS settings

D) Give the client certificate to the server.
- On the client:
	- Duplicate the client certificate Certificate.pem to CertificatePublic.pem
	- Edit the new certificate CertificatePublic.pem and keep only text from "-----BEGIN CERTIFICATE-----" to "-----END CERTIFICATE-----"
	- Copy the certificate CertificatePublic.pem to the server
- On the server:
	- add the client certificate to the keystore:
		$ keytool -import -file CertificatePublic.pem -keystore trust.jks -alias osirix
	* trust.jks is the name of the truststore on the server (dcm4chee.archive:service=TLSConfig / TrustStoreURL)
	* the alias name (osirix) can be anything
	- Trust the certificate:
		$ Trust this certificate? [no]:  yes
	- restart the dcm4chee server

==========================================================================
DICOM TLS in OsiriX: trusting server certificate
==========================================================================
To use the options "Trust the following CA certificate" and "Peer Authentication"

A) On the server:
- Export the server certificate:
	$ keytool -export -rfc -file vm1.pem -keystore vm1.jks -alias vm1
* in this case, the server certificate is stores in vm1.jks as alias vm1, the -rfc option ensures the creation of a standard PEM file (vm1.pem)
- copy the PEM certificate file to the client

B) In OsiriX
- choose the server's PEM certificate in the "Trust the following CA certificate" option
- you can now choose to "verify" or "require" "Peer Authentication"

==========================================================================
Document ends here. Thanks For reading.
==========================================================================